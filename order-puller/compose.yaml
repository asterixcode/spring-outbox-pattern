services:

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION}
    container_name: kafka
    hostname: kafka
    # Just in case Zookeeper isn't up yet restart
    restart: always
    environment:
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:29092,LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:29092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      # Key/value pairs for the security protocol to use, per listener name
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      # The same ZooKeeper port is specified here as the previous container.
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      # The KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR is set to 1 for a single-node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 2
      # Whether or not to auto create topics when data is published for the first time to a topic
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_PLATFORM_VERSION}
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    environment:
      # Connects to the docker internal network port: 29092
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8081"
    depends_on:
      - kafka
    ports:
      - "9000:8080"

  # The zipkin process services the UI, and also exposes a POST endpoint that
  # instrumentation can send trace data to. Scribe is disabled by default.
  # Zipkin: http://localhost:9411
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - "9411:9411"
    environment:
      JAVA_OPTS: "-Xms1024m -Xmx2048m -XX:+ExitOnOutOfMemoryError"

networks:
  outbox:
    driver: bridge